% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/InterjectionPipe.R
\docType{class}
\name{InterjectionPipe}
\alias{InterjectionPipe}
\title{Class to find and/or remove the interjections on the data of an instance}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
InterjectionPipe$new(propertyName = "interjection",
                     propertyLanguageName = "language",
                     pathResourcesInterjections = "resources/interjections-json",
                     alwaysBeforeDeps = list("GuessLanguagePipe"),
                     notAfterDeps = list())
}
\arguments{
\item{propertyName}{(character) Name of the property associated with the pipe.}

\item{propertyLanguageName}{(character) Name of the language property.}

\item{pathResourcesInterjections}{(character) Path where are stored the
interjections resources.}

\item{alwaysBeforeDeps}{(list) The dependences alwaysBefore (pipes that must
be executed before this one).}

\item{notAfterDeps}{(list) The dependences notAfter (pipes that cannot be
executed after this one).}
}
\description{
This class allows you to preprocess the data of an instance to
find the interjections that are in it. Optionally, you can decide whether to
remove the data interjections or not.
}
\details{
This class needs files in json format that will contain the
interjections to be located. For this it is necessary that the instance
contains a property that indicates the language of the data to be able to
correctly choose the list of interjections that apply to the data. The format
 of the file names of the resources has to be: interj.xxx.json (Being xxx the
 value of the language property of the instance).

The pipe will invalidate the instance in the moment that the resulting data is
empty.
}
\section{Inherit}{

This class inherits from \code{\link{PipeGeneric}} and implements the
\code{pipe} abstract function.
}

\section{Methods}{

\itemize{
\item{\bold{pipe}}{
Function that preprocesses the instance to obtain/remove the interjections.
The interjections found in the pipe are added to the list of properties of
the Instance. If the removeInterjections parameter is TRUE, the instance data
will be removed.
\itemize{
\item{\emph{Usage}}{

\code{pipe(instance, removeInterjections = TRUE)}
}
\item{\emph{Value}}{

The instance with the modifications that have occurred in the pipe.
}
\item{\emph{Arguments}}{
\itemize{
\item{\strong{instance}}{
(Instance) Instance to preproccess.
}
\item{\strong{removeInterjections}}{
(logical) Indicate if the interjections are removed or not.
}
}
}
}
}

\item{\bold{findInterjection}}{
Function that checks if the interjection is in the data.
\itemize{
\item{\emph{Usage}}{

\code{findInterjection(data, interjection)}{}
}
\item{\emph{Value}}{

TRUE or FALSE depending on whether the interjection is on the data.
}
\item{\emph{Arguments}}{
\itemize{
\item{\strong{data}}{
(character) Text to preproccess.
}
\item{\strong{interjection}}{
(character) Indicate the interjection to find.
}
}
}
}
}

\item{\bold{removeInterjection}}{
Function that removes the interjection in the data.
\itemize{
\item{\emph{Usage}}{

\code{removeInterjection(interjection, data)}
}
\item{\emph{Value}}{

The data with interjection removed.
}
\item{\emph{Arguments}}{
\itemize{
\item{\strong{interjection}}{
(character) Indicate the interjection to remove.
}
\item{\strong{data}}{
(character) Text in which interjections will be removed.
}
}
}
}
}

\item{\bold{getPropertyLanguageName}}{
Getter of name of property language.
\itemize{
\item{\emph{Usage}}{

\code{getPropertyLanguageName()}
}
\item{\emph{Value}}{

Value of name of property language.
}
}
}

\item{\bold{getPathResourcesInterjections}}{
Getter of path of interjections resources.
\itemize{
\item{\emph{Usage}}{

\code{getPathResourcesInterjections()}
}
\item{\emph{Value}}{

Value of path of interjections resources.
}
}
}
}
}

\section{Private fields}{

\itemize{
\item{\bold{propertyLanguageName}}{
 (character) The name of property about language.
}
\item{\bold{pathResourcesInterjections}}{
 (character) The path where are the resources.
}
}
}

\seealso{
\code{\link{PipeGeneric}}, \code{\link{Instance}},
\code{\link{ResourceHandler}}
}
\keyword{datasets}
