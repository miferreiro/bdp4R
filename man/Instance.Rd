% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Instance.R
\docType{class}
\name{Instance}
\alias{Instance}
\title{Super class that handles the general functionalities of the management
of the instances}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
Instance$new(path)
}
\arguments{
\item{path}{(character) Path of the file.}
}
\description{
The tasks of the functions, that the Instance class has, are to
handle the variables associated with an instance.
}
\details{
Building...
}
\section{Methods}{

\itemize{
\item{\bold{obtainDate}}{
Abstract function to obtain the date that has to be implemented by the
classes that inherit from instance.
}
\item{\bold{obtainSource}}{
Abstract function to obtain the source that has to be implemented by the
classes that inherit from instance.
}
\item{\bold{getDate}}{
Getter of date.
\itemize{
\item{\emph{Usage}}{

\code{getDate()}
}
\item{\emph{Value}}{

Value of date.
}
}
}

\item{\bold{setDate}}{
Setter of date.
\itemize{
\item{\emph{Usage}}{

\code{setDate(date)}
}
\item{\emph{Arguments}}{
\itemize{
\item{\strong{date}}{
(character) The new value of date.
}
}
}
}
}

\item{\bold{getSource}}{
Getter of source.
\itemize{
\item{\emph{Usage}}{

\code{getSource()}
}
\item{\emph{Value}}{

Value of source.
}
}
}

\item{\bold{setSource}}{
Setter of source.
\itemize{
\item{\emph{Usage}}{

\code{setSource(source)}
}
\item{\emph{Arguments}}{
\itemize{
\item{\strong{source}}{
(character) The new value of source.
}
}
}
}
}

\item{\bold{getPath}}{
Getter of path.
\itemize{
\item{\emph{Usage}}{

\code{getPath()}
}
\item{\emph{Value}}{

Value of path.
}
}
}

\item{\bold{getProperties}}{
Getter of properties.
\itemize{
\item{\emph{Usage}}{

\code{getProperties()}
}
\item{\emph{Value}}{

Value of properties.
}
}
}

\item{\bold{setProperties}}{
Setter of properties.
\itemize{
\item{\emph{Usage}}{

\code{setProperties(properties)}
}
\item{\emph{Arguments}}{
\itemize{
\item{\strong{properties}}{
(list) The new value of properties.
}
}
}
}
}

\item{\bold{addProperties}}{
Add a property to the list of properties.
\itemize{
\item{\emph{Usage}}{

\code{addProperties(propertyValue, propertyName)}
}
\item{\emph{Arguments}}{
\itemize{
\item{\strong{propertyValue}}{
() The value of the new property.
}
\item{\strong{propertyName}}{
(character) The name of the new property.
}
}
}
}
}

\item{\bold{getSpecificProperty}}{
Obtains a specific property.
\itemize{
\item{\emph{Usage}}{

\code{getSpecificProperty(propertyName)}
}
\item{\emph{Value}}{

The value of the specific property.
}
\item{\emph{Arguments}}{
\itemize{
\item{\strong{propertyName}}{
(character) The name of the property to obtain.
}
}
}
}
}

\item{\bold{isSpecificProperty}}{
Obtains if exists a specific property.
\itemize{
\item{\emph{Usage}}{

\code{isSpecificProperty(propertyName)}
}
\item{\emph{Value}}{

TRUE or FALSE depending on whether the property is on the list of properties.
}
\item{\emph{Arguments}}{
\itemize{
\item{\strong{propertyName}}{
(character) The name of the property to check.
}
}
}
}
}

\item{\bold{setSpecificProperty}}{
Changes the value of the one property.
\itemize{
\item{\emph{Usage}}{

\code{setSpecificProperty(propertyName, propertyValue)}
}
\item{\emph{Arguments}}{
\itemize{
\item{\strong{propertyName}}{
() The new value of the property.
}
\item{\strong{propertyValue}}{
(character) The name of the  property.
}
}
}
}
}

\item{\bold{getNamesOfProperties}}{
Getter of the names of properties.
\itemize{
\item{\emph{Usage}}{

\code{getNamesOfProperties()}
}
\item{\emph{Value}}{

Value of the names of properties.
}
}
}

\item{\bold{isInstanceValid}}{
Obtains if the Instance is valid.
\itemize{
\item{\emph{Usage}}{

\code{isInstanceValid()}
}
\item{\emph{Value}}{

Value of isValid.
}
}
}

\item{\bold{invalidate}}{
Sets the instance in the invalid state.
\itemize{
\item{\emph{Usage}}{

\code{invalidate()}
}
}
}

\item{\bold{getFlowPipes}}{
Get the pipe flow list.
\itemize{
\item{\emph{Usage}}{

\code{getNamesOfProperties()}
}
\item{\emph{Value}}{

Value of pipe flow list.
}
}
}

\item{\bold{addFlowPipes}}{
Added the name of the pipe to the list that keeps track of the flow of pipes
that the instance has gone through.
\itemize{
\item{\emph{Usage}}{

\code{addFlowPipes(namePipe)}
}
\item{\emph{Arguments}}{
\itemize{
\item{\strong{namePipe}}{
(character) Pipe name to be introduced into the flow.
}
}
}
}
}

\item{\bold{getBanPipes}}{
Get the pipe flow array.
\itemize{
\item{\emph{Usage}}{

\code{getNamesOfProperties()}
}
\item{\emph{Value}}{

Value of pipe ban array.
}
}
}

\item{\bold{addBanPipes}}{
Added the name of the pipe to the array that keeps track pipes that can not
be run after.
\itemize{
\item{\emph{Usage}}{

\code{addBanPipes(namePipe)}
}
\item{\emph{Arguments}}{
\itemize{
\item{\strong{namePipe}}{
(character) Pipe name to be introduced into the ban array.
}
}
}
}
}

\item{\bold{checkCompatibility}}{
Check compability between pipes.
\itemize{
\item{\emph{Usage}}{

\code{checkCompatibility(namePipe, alwaysBefore)}
}
\item{\emph{Value}}{

TRUE/FALSE depends if the compability between pipes is correctly or not.
}
\item{\emph{Arguments}}{
\itemize{
\item{\strong{namePipe}}{
(character) Name of the pipe to check the compatibility.
}
\item{\strong{alwaysBefore}}{
(list) Pipes that the instance had to go through.
}
}
}
}
}
}
}

\section{Private fields}{

\itemize{
\item{\bold{date}}{
 (character) The date on which the source was generated or sent.
}
\item{\bold{source}}{
 (character) The text of the file without modifications.
}
\item{\bold{path}}{
 (character) Identifier of the instance, in this case it will be the path of
 the file from which the properties are extracted.
}
\item{\bold{data}}{
 (character) The text of the file with modifications.
}
\item{\bold{properties}}{
 (list) Contains a list of properties extracted from the text that is being
 processed.
}
\item{\bold{isValid}}{
 (logical) Indicates if the instance is valid or not.
}
\item{\bold{flowPipes}}{
 (list) The list contains the pipes that the instance has passed through.
}
\item{\bold{banPipes}}{
 (array) The list contains the pipes that can not be executed from that moment.
}
}
}

\keyword{datasets}
